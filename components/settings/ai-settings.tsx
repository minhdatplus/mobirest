'use client'

import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { useState, useEffect } from "react"
import { toast } from "sonner"
import { useAIProviderStore } from '@/lib/stores/ai-provider-store'
import { AI_PROVIDERS, type AIProviderId } from '@/lib/constants/ai-providers'
import { useAPIKeysStore } from '@/lib/stores/api-keys-store'
import { Switch } from '@/components/ui/switch'
import { Slider } from '@/components/ui/slider'
import { AI_PROVIDER_CONFIGS } from '@/lib/types/ai-provider'

interface AISettings {
  defaultProvider: AIProviderId
  openaiApiKey: string
  geminiApiKey: string
  anthropicApiKey: string
  groqApiKey: string
  maxTokens: number
  temperature: number
  autoGenerateDocs: boolean
  includeExamples: boolean
  maxExamples: number
  outputFormat: 'markdown' | 'openapi' | 'both'
  truncateResponse: boolean
  maxResponseLength: number
}

export function AISettings() {
  const { defaultProvider, setDefaultProvider } = useAIProviderStore()
  const { keys, setKey } = useAPIKeysStore()
  const [settings, setSettings] = useState<AISettings>({
    defaultProvider,
    ...keys,
    maxTokens: 4096,
    temperature: 0.7,
    autoGenerateDocs: false,
    includeExamples: true,
    maxExamples: 3,
    outputFormat: 'both',
    truncateResponse: true,
    maxResponseLength: 1000
  })

  useEffect(() => {
    setSettings(prev => ({
      ...prev,
      defaultProvider,
      ...keys
    }))
  }, [defaultProvider, keys])

  const handleSave = () => {
    setDefaultProvider(settings.defaultProvider)
    
    // Save API keys
    AI_PROVIDERS.forEach(provider => {
      const keyName = `${provider.id}ApiKey` as keyof typeof keys
      setKey(provider.id, settings[keyName])
    })
    
    toast.success('AI settings saved successfully')
  }

  return (
    <div className="space-y-8">
      {/* Provider Settings */}
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium">AI Provider Configuration</h3>
          <p className="text-sm text-muted-foreground">
            Configure AI providers and their API keys
          </p>
        </div>
        
        <div className="space-y-4">
          <div className="grid gap-2">
            <Label>Default AI Provider</Label>
            <Select
              value={settings.defaultProvider}
              onValueChange={(value) =>
                setSettings(prev => ({ ...prev, defaultProvider: value }))
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Select default provider" />
              </SelectTrigger>
              <SelectContent>
                {AI_PROVIDERS.map(provider => (
                  <SelectItem key={provider.id} value={provider.id}>
                    {provider.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* API Keys */}
          <div className="grid gap-4 pt-2">
            {AI_PROVIDERS.map(provider => (
              <div key={provider.id} className="grid gap-2">
                <Label htmlFor={`${provider.id}-key`}>{provider.name} API Key</Label>
                <Input
                  id={`${provider.id}-key`}
                  type="password"
                  value={settings[`${provider.id}ApiKey` as keyof typeof settings] as string}
                  onChange={(e) =>
                    setSettings(prev => ({ 
                      ...prev, 
                      [`${provider.id}ApiKey`]: e.target.value 
                    }))
                  }
                  placeholder={provider.id === 'gemini' ? 'AIzaSy...' : provider.id === 'groq' ? 'gsk-...' : 'sk-...'}
                />
              </div>
            ))}
          </div>
        </div>
      </div>

      <Separator />

      {/* Documentation Generation Settings */}
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium">Documentation Generation</h3>
          <p className="text-sm text-muted-foreground">
            Configure how AI generates API documentation
          </p>
        </div>

        {/* Generation Settings */}
        <div className="space-y-6">
          <div className="space-y-4">
            <h4 className="text-sm font-medium text-muted-foreground">Model Settings</h4>
            
            <div className="space-y-4">
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Temperature</Label>
                  <span className="text-sm text-muted-foreground">{settings.temperature}</span>
                </div>
                <Slider 
                  value={[settings.temperature]}
                  min={0}
                  max={1}
                  step={0.1}
                  onValueChange={([value]) => setSettings(prev => ({ ...prev, temperature: value }))}
                />
                <p className="text-xs text-muted-foreground">
                  Lower values make output more focused, higher values make it more creative
                </p>
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Max Tokens</Label>
                  <span className="text-sm text-muted-foreground">{settings.maxTokens}</span>
                </div>
                <Slider 
                  value={[settings.maxTokens]}
                  min={1000}
                  max={8192}
                  step={100}
                  onValueChange={([value]) => setSettings(prev => ({ ...prev, maxTokens: value }))}
                />
              </div>
            </div>
          </div>

          <div className="space-y-4">
            <h4 className="text-sm font-medium text-muted-foreground">Content Settings</h4>
            
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="auto-generate">Auto-generate Documentation</Label>
                  <p className="text-xs text-muted-foreground">
                    Automatically generate documentation after each request
                  </p>
                </div>
                <Switch
                  id="auto-generate"
                  checked={settings.autoGenerateDocs}
                  onCheckedChange={(checked) => 
                    setSettings(prev => ({ ...prev, autoGenerateDocs: checked }))
                  }
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="include-examples">Include Examples</Label>
                  <p className="text-xs text-muted-foreground">
                    Include example requests and responses in documentation
                  </p>
                </div>
                <Switch
                  id="include-examples"
                  checked={settings.includeExamples}
                  onCheckedChange={(checked) => 
                    setSettings(prev => ({ ...prev, includeExamples: checked }))
                  }
                />
              </div>

              {settings.includeExamples && (
                <div className="grid gap-2 pl-6 border-l-2 border-muted">
                  <Label>Maximum Examples</Label>
                  <Select 
                    value={settings.maxExamples.toString()}
                    onValueChange={(value) => 
                      setSettings(prev => ({ ...prev, maxExamples: parseInt(value) }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select number" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4, 5].map(num => (
                        <SelectItem key={num} value={num.toString()}>
                          {num}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}

              <div className="space-y-2">
                <Label>Default Output Format</Label>
                <Select 
                  value={settings.outputFormat}
                  onValueChange={(value: 'markdown' | 'openapi' | 'both') => 
                    setSettings(prev => ({ ...prev, outputFormat: value }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select format" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="markdown">Markdown</SelectItem>
                    <SelectItem value="openapi">OpenAPI</SelectItem>
                    <SelectItem value="both">Both</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="truncate-response">Truncate Long Responses</Label>
                  <p className="text-xs text-muted-foreground">
                    Limit the length of response samples in documentation
                  </p>
                </div>
                <Switch
                  id="truncate-response"
                  checked={settings.truncateResponse}
                  onCheckedChange={(checked) => 
                    setSettings(prev => ({ ...prev, truncateResponse: checked }))
                  }
                />
              </div>

              {settings.truncateResponse && (
                <div className="grid gap-2 pl-6 border-l-2 border-muted">
                  <Label>Maximum Response Length</Label>
                  <Input 
                    type="number"
                    value={settings.maxResponseLength}
                    onChange={(e) => 
                      setSettings(prev => ({ 
                        ...prev, 
                        maxResponseLength: parseInt(e.target.value) 
                      }))
                    }
                    min={100}
                    max={10000}
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="flex justify-end">
        <Button onClick={handleSave}>Save Changes</Button>
      </div>
    </div>
  )
} 